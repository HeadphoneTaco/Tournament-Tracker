--------------------------------------------------------------------------------
Following Along with a YouTube Tutorial
C# Application from Start to Finish in 24 hours
Tim Corey
--------------------------------------------------------------------------------
-----Potentially Helpful Comments from the Peanut Gallery

	Sr Viejo

		TIP OF THE DAY:  When comparing against a constant, list the constant first, not last.  
		That way, if you mistype the comparison (ie. == or !=), the compiler will throw an error and you won't have to spend time debugging, only to find an assignment where comparison was intended.  
		For example, use "if ( true == variableName )" instead of "if ( variableName == true )" so that if you accidentally entered a single equal sign (ie. "if ( true = variableName )"), the compiler will throw an error.


	Fruitcake

		If you're following along in 2022, make sure that the "TrackerUI" project is a 
		created as a "Windows Forms App", not a "Windows Form App (.NET Framework)". 
		Otherwise you'll get a problem with the target .NET framework when adding the 
		TrackerLibrary dependency to the Tracker UI project.


	OniFeez

		In case you are programming this in visual studio 2019 and beyond; 
		it's not enough to just create with 'Class Library' and the like, you'll need to find and choose the options that say 'Class Library (.NET Framework)'. 
		This is because the normal 'Class Library' does not have the Add References section in the Solution Explorer.

	



	FoxHoundUnit89

		4:58:00 if anyone else gets to this point and is confused because the reference isn't working, you might have done what I did and created the wrong kind of class library.  
		The program is not at all clear about this but you have to make sure you pick the right version of a class library, even though they all have identical names.  
		
		//IMPORTANT
		You must ensure you pick the one that also allows you to target the exact same version of .NET FRAMEWORK that your TrackerUI solution is using.  
		//IMPORTANT
		
		If you've already gotten this far it's okay. 
		Just copy all of your scripts into a backup folder for TrackerLibrary, delete the old one, add a new one using the correct version of class library;
		copy your script backups into the new folder, and then in VS right click the new TrackerLibrary and add existing items.  
		Select all of your now restored scripts in the new folder and everything is fine.  
		Redo the reference as instructed in the video and if you did it right it'll work this time.


	Unknown User

		If anyone is having issues with seeing the characters (specially in the SQL section) because of low resolution (720p is the max here), you can head over to Tim Corey's channel (link in the description) and watch them there. 
		He has it in 1080p as the max


	
	Andrzej Klonowski

		Hello Tim, bug found: in 05:30:00 in  validateForm method (CreatePrizeForm.cs) if you just change output to false is wrong. 
		For example if all of them check are false , but last one is correct, then You'll validate it as an correct which is wrong.










--------------------------------------------------------------------------------
Lesson 0
--------------------------------------------------------------------------------
-----The Application

A tournament Tracker that sets up a schedule for teams to play each other in a single-elimination style of match-ups.

Useful for:
	-Office ping pong tournaments
	-Rec league playoffs
	-3v3 basketball
	-etc...
--------------------------------------------------------------------------------
-----Visual Idea

	   ----------|
			     |
			     |----------|
			     |          |
	   ----------|          |----------|
                            |          |
               	  ----------|          |----------|
									   |	      |
							 ----------|          |
											      |
										   	      |----------Winner
						    					  |
					         ----------|	      |
									   |	      |
			      ----------|		   |----------|
							|		   |
	   ----------|			|----------|
			     | 	        |
		    	 |----------|
			     |
	   ----------|
--------------------------------------------------------------------------------
-----Technology Utilized

The C# 'tech' encountered includes:
	-Multi-form WinForms application
	-In-depth Class Library
	-SQL Database
	-Text File Storage
	-Dapper
	-Linq
	-Interfaces
	-Emailing from C#
	-Custom Events
	-Assorted Debugging
--------------------------------------------------------------------------------
Lesson 1 - Initial Planning
--------------------------------------------------------------------------------
-----Scenario

Your friends come to you and ask you to create a tournament tracker.
They are always playing games and want to determine who is the best.
The idea is that you create a bracket tournament system where the computer will tell them who to play in a single-elimination style bracket.
At the end, the winner should be identified.
--------------------------------------------------------------------------------
-----Requirements

1. Track games played, and their outcome. (Who won)
2. Multiple competitors play in the tournament.
3. Create a tournament plan. (Who plays in what order)
4. Schedule games.
5. A single loss eliminates a player.
6. The last player standing is the winner.
--------------------------------------------------------------------------------
-----Questions

1. How many players will the tournament handle? Is it variable?
2. If a tournament has less than the full complement of players, how do we handle it?
3. Should the ordering of who plays each other be random or ordered by input order?
4. Should we schedule the games, or are they just played whenever?
5. If the games are scheduled, how does the system know when to schedule games for?
6. If the games are played whenever, can a game from the second round be played before the first round is complete?
7. Does the system need to store a score of some kind, or just who won?
8. What type of front-end should this system have? (form, webpage, app, etc)
9. Where will the data be stored?
10. Will this system handle entry fees, prizes, or other payouts?
11. What type of reporting is needed?
12. Who can fill in the results of a game?
13. Are there varying levels of access?
14. Should this system contact users about upcoming games?
15. Is each player on their own, or can teams use this tournament tracker?
--------------------------------------------------------------------------------
Lesson 2 - Overview Planning
--------------------------------------------------------------------------------
-----Questions Review

Q1
	-How many players will the tournament handle? Is it variable?
		
		-The application should be able to handle a variable number of players in a tournament.

Q2
	-If a tournament has less than the full complement of players, how do we handle it?
		
		-A tournament with less than the perfect number(2^n) should end in 'byes'. 
		'Byes', mean to randomly select players to skip 1st round.

Q3
	-Should the ordering of who plays each other be random or ordered by input order?
		
		-The ordering of the tournament should be random.

Q4
	-Should we schedule the games, or are they just played whenever?
		
		-The games should be played in whatever order and whenever the players want to play them.

Q5
	-If the games are scheduled, how does the system know when to schedule games for?
		
		-They aren't scheduled, so we don't care.

Q6
	-If the games are played whenever, can a game from the second round be played before the first round is complete?
		
		-No. Each round should be fully completed before the next round is displayed.

Q7 
	-Does the system need to store a score of some kind, or just who won?
		
		-Storing a simple score would be nice. 
		Just a number for each player. 
		That way, the tracker can be flexible enough to handle
		a checkers tournament (the winner would have a 1 and the loser a 0) or a basketball tournament.

Q8
	-What type of front-end should this system have? (form, webpage, app, etc)
		
		-The system should be a desktop program for now, but down the road we might want to turn it into an mobile app or a website.

Q9
	-Where will the data be stored?
		
		-Ideally, the data should be stored in a SQL database, but please put in an option to store to a text file instead.

Q10
	- Will this system handle entry fees, prizes, or other payouts?
		
		-Yes. 
		The tournament should have the option of charging an entry fee. 
		Prizes should also be an option, where the tournament admin chooses how much money to award a variable number of places. 
		The total cash amount should not exceed the income from the tournament. 
		A percentage-based system would also be nice to specify.

Q11
	- What type of reporting is needed?
		
		-A simple report specifying the outcome of the games per round as well as a report that specifies who won and how much they won.
		These can be just displayed on a form or they can be emailed to tournament competitors and the admin.

Q12
	- Who can fill in the results of a game?

		-Anyone using the application should be able to fill in the game scores.

Q13
	- Are there varying levels of access?

		-No.
		The only method of varied access is if the competitors are not allowed into the application and instead, they do everything via email.

Q14
	- Should this system contact users about upcoming games?

		-Yes, the system should email users that they are due to play in a round as well as who they are scheduled to play.

Q15
	- Is each player on their own, or can teams use this tournament tracker?

		-The tournament tracker should be able to handle the addition of other members.
		All members should be treated as equals in that they all get tournament emails.
		Teams should also be able to name their teams.
--------------------------------------------------------------------------------
-----Big Picture Design

Structure: Windows Form application and CLass Library
Data: SQL and/or Text File
Users: One at a time on one application

Key Concepts:
	-Email
	-SQL
	-Custom Events
	-Error Handling
	-Interfaces
	-Random Ordering

Bonus Idea(s):
	-Texting/SMS
--------------------------------------------------------------------------------
Lesson 3 - Data Design
--------------------------------------------------------------------------------
-----Mapping the Data

Team
	-TeamMembers (List<Person>)
	-TeamName (string)

Person
	-FirstName (string)
	-LastName (string)
	-EmailAddress (string)
	-CellphoneNumber (string)

Tournament
	-TournamentName (string)
	-EntryFee (decimal)
	-EnteredTeams (List<Team>)
	-Prizes (List<Prize>)
	-Rounds (List<List<Matchup>>)

Prize
	-PlaceNumber (int)
	-PlaceName (string)
	-PrizeAmount (decimal)
	-PrizePercentage (double)


Matchup
	-Entries (List<MatchupEntry>)
	-Winner (Team)
	-MatchupRound (int)

MatchupEntry
	-TeamCompeting (Team)
	-Score (double)
	-ParentMatchup (Matchup)
--------------------------------------------------------------------------------
Lesson 4 - User Interface Design
--------------------------------------------------------------------------------
-----Tournament Viewer Form


	Tournament: <name>

	Round	//Dropdown

			//Unplayed Only Checkbox

	____________________________
	|matchupListBox				|			Sample Team 1
	|							|
	|							|			Score	//Score Displayed
	|							|
	|							|					VS				//Score Button
	|							|				
	|							|			Sample Team 2
	|							|
	-----------------------------			Score	//Score Displayed
--------------------------------------------------------------------------------
-----Create Tournament Form


	Create Tournament

	Tournament Name					Teams/Players
	//Entry Field					____________________________
									|tournamentPlayersListBox	|	//Delete Selected Button
									|							|
	Entry Fee   //Entry Field		|							|
									|							|
	Select Team	//Create New Button	-----------------------------
		//Selection Dropdown

		//Add Team Button			Prizes
									____________________________
		//Create Prize Button		|prizesListBox				|	//Delete Selected Button
									|							|
									|							|
									-----------------------------
							//Create Tournament Button
--------------------------------------------------------------------------------
-----Create Team Form


	Create Team

	Team Name
	//Entry Field					____________________________
									|tournamentPlayersListBox	|
	Select Team Member				|							|
	//Dropdown Menu					|							|
		//Add Member Button			|							|
									|							|
									|							|
	Add New Member					|							|
									|							|
	First Name		//Entry Field	|							|
	Last Name		//Entry Field	|							|
	Email			//Entry Field	|							|
	Cellphone		//Entry Field	|							|				
									|							|
		//Create Member Button		|							|
									-----------------------------

							//Create Team Button
--------------------------------------------------------------------------------
-----Create Prize Form


	Create Prize

		Place Number             //Entry Field

		Place Name				 //Entry Field

		Prize Amount			 //Entry Field

						-or-

		Prize Percentage		 //Entry Field


				//Create Prize Button
--------------------------------------------------------------------------------
-----Tournament Dashboard Form


							TOURNAMENT DASHBOARD			

						Load Existing Tournament
							//Selection Dropdown

						//Load Tournament Button


						//Create Tournament Button
--------------------------------------------------------------------------------
Lesson 5 - Logic Planning
--------------------------------------------------------------------------------
I ain't transcribing that, homie. Cross that bridge when we get there.
--------------------------------------------------------------------------------
Lesson 6 - Class Library Creation
--------------------------------------------------------------------------------
Tim: "We've been stuck in planning mode."

Me: "Yee boy, let's get into it."

///<summary>
///This is an xml comment, these are awesome!
///</summary>
--------------------------------------------------------------------------------
Lesson 7 - Form Building
--------------------------------------------------------------------------------
Just concentrate on building the forms, don't worry about code for now.

Use White background instead of default light gray.

Change the font right away, so subsequently created forms inherit that font,
for consistency.

Metro Studio program from sync fusion to creating icon files.
Not bothering with that for now.

You can copy/paste objects in a form, but *don't* do that with forms themselves.
Make sure that duplicated objects have their names updated.

If you select an form object property in the properties window,
You can then select a different object, and you can immediately start modifying
the value that both objects share. Such as name or text, for example.


Group Boxes are a good way to subtly group thingamabobs together


Use the properties window dropdown at the top, to double check for missed names and things
--------------------------------------------------------------------------------
Lesson 8 - SQL Database Design
--------------------------------------------------------------------------------


When designing tables, make sure that the id row has identity Specification set to 'Yes'





-SQL Scripts
-Manual Database entry
-Stored Procedures


Highlighted sections in a query is what gets executed!
If nothing is highlighted, then everything is run.
--------------------------------------------------------------------------------
Lesson 9 - Prize Form Wire Up
--------------------------------------------------------------------------------

This is spicy territory.

Break the problems down into chunks, and be patient.


-Pseudocode

model1

if (using SQL == true)
{
	open database connection
	save the data
	get back the updated model
}

if (using text file == true)
{
	open text file
	generate id
	save the data
}

"Keep pulling the thread"


-How do we get that connection information?
-How do we connect to two different data sources, to do the same task?

Static class for data source info
Interface for data sources





